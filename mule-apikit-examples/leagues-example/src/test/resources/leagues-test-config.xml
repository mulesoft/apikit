<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core
        http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/http
        http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
        http://www.mulesoft.org/schema/mule/apikit
        http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd ">

    <http:connector name="httpConnector">
        <service-overrides sessionHandler="org.mule.session.NullSessionHandler"/>
    </http:connector>

    <apikit:config name="leaguesApi" raml="leagues.raml" consoleEnabled="true" consolePath="console" />

    <spring:bean id="league-api" class="org.mule.examples.leagues.LeagueAPI" init-method="initialize"/>

    <apikit:mapping-exception-strategy name="apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-payload value="resource not found" />
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-payload value="method not allowed" />
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-payload value="unsupported media type" />
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-payload value="not acceptable" />
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.api.exception.BadRequestException" />
            <set-payload value="bad request" />
        </apikit:mapping>
        <apikit:mapping statusCode="409">
            <apikit:exception value="org.mule.examples.leagues.exceptions.ConflictException" />
            <set-payload value="conflict" />
        </apikit:mapping>
    </apikit:mapping-exception-strategy>

    <flow name="main">
        <http:inbound-endpoint address="http://localhost:${http.port}/api" connector-ref="httpConnector"/>
        <apikit:router config-ref="leaguesApi" />
        <exception-strategy ref="apiKitGlobalExceptionMapping" />
    </flow>

    <flow name="delete:/teams/{teamId}:leaguesApi">
        <expression-component>
            app.registry['league-api'].deleteTeam(teamId);
        </expression-component>
    </flow>

    <flow name="get:/teams:leaguesApi">
        <expression-component>
            payload = app.registry['league-api'].getTeams(message.getAttribues().getHeaders()['city']);
        </expression-component>
    </flow>

    <flow name="get:/fixture/{homeTeamId}/{awayTeamId}:leaguesApi">
        <expression-component>
            payload = app.registry['league-api'].getMatch(homeTeamId, awayTeamId);
        </expression-component>
    </flow>

    <flow name="get:/teams/{teamId}:leaguesApi">
        <expression-component>
            payload = app.registry['league-api'].getTeam(teamId);
        </expression-component>
    </flow>

    <flow name="get:/positions:leaguesApi">
        <expression-component>
            payload = app.registry['league-api'].getPositions();
        </expression-component>
    </flow>

    <flow name="get:/fixture:leaguesApi">
        <expression-component>
            payload = app.registry['league-api'].getFixture();
        </expression-component>
    </flow>

    <flow name="post:/teams:leaguesApi">
        <custom-transformer class="org.mule.module.apikit.transform.PayloadNormalizerTransformer"
                            returnClass="org.mule.examples.leagues.request.Team"/>
        <set-property propertyName="Location" value="http://localhost:${http.port}/api/teams/#[mel:payload.id]"/>
        <expression-component>
            app.registry['league-api'].addTeam(payload);
        </expression-component>
        <set-payload value="#[mel:org.mule.transport.NullPayload.getInstance()]"/>
    </flow>

    <flow name="put:/fixture/{homeTeamId}/{awayTeamId}:leaguesApi">
        <custom-transformer class="org.mule.module.apikit.transform.PayloadNormalizerTransformer"
                            returnClass="org.mule.examples.leagues.request.Score"/>
        <expression-component>
            app.registry['league-api'].updateScore(homeTeamId, awayTeamId, payload);
        </expression-component>
        <set-payload value="#[mel:org.mule.transport.NullPayload.getInstance()]"/>
    </flow>

    <flow name="put:/teams/{teamId}:leaguesApi">
        <custom-transformer class="org.mule.module.apikit.transform.PayloadNormalizerTransformer"
                            returnClass="org.mule.examples.leagues.request.UpdateTeam"/>
        <expression-component>
            app.registry['league-api'].updateTeam(teamId, payload);
        </expression-component>
        <set-payload value="#[mel:org.mule.transport.NullPayload.getInstance()]"/>
    </flow>

</mule>
